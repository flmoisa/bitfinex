// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Bitfinex.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TickerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: String = String()

  var channel: String = String()

  var symbol: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TickerResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: String = String()

  var channel: String = String()

  var chanID: Int64 = 0

  var symbol: String = String()

  var pair: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct BookRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: String = String()

  var channel: String = String()

  var symbol: String = String()

  var prec: String = String()

  var freq: String = String()

  var len: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct BookResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: String = String()

  var channel: String = String()

  var chanID: Int64 = 0

  var symbol: String = String()

  var prec: String = String()

  var freq: String = String()

  var len: String = String()

  var pair: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension TickerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TickerRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "channel"),
    3: .same(proto: "symbol"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 1)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TickerRequest, rhs: TickerRequest) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TickerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TickerResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "channel"),
    3: .same(proto: "chanId"),
    4: .same(proto: "symbol"),
    5: .same(proto: "pair"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.chanID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.pair) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 1)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 2)
    }
    if self.chanID != 0 {
      try visitor.visitSingularInt64Field(value: self.chanID, fieldNumber: 3)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 4)
    }
    if !self.pair.isEmpty {
      try visitor.visitSingularStringField(value: self.pair, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TickerResponse, rhs: TickerResponse) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.chanID != rhs.chanID {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.pair != rhs.pair {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BookRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BookRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "channel"),
    3: .same(proto: "symbol"),
    4: .same(proto: "prec"),
    5: .same(proto: "freq"),
    6: .same(proto: "len"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.prec) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.freq) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.len) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 1)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    if !self.prec.isEmpty {
      try visitor.visitSingularStringField(value: self.prec, fieldNumber: 4)
    }
    if !self.freq.isEmpty {
      try visitor.visitSingularStringField(value: self.freq, fieldNumber: 5)
    }
    if !self.len.isEmpty {
      try visitor.visitSingularStringField(value: self.len, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BookRequest, rhs: BookRequest) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.prec != rhs.prec {return false}
    if lhs.freq != rhs.freq {return false}
    if lhs.len != rhs.len {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BookResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BookResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "channel"),
    3: .same(proto: "chanId"),
    4: .same(proto: "symbol"),
    5: .same(proto: "prec"),
    6: .same(proto: "freq"),
    7: .same(proto: "len"),
    8: .same(proto: "pair"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.event) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.channel) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.chanID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.prec) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.freq) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.len) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.pair) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 1)
    }
    if !self.channel.isEmpty {
      try visitor.visitSingularStringField(value: self.channel, fieldNumber: 2)
    }
    if self.chanID != 0 {
      try visitor.visitSingularInt64Field(value: self.chanID, fieldNumber: 3)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 4)
    }
    if !self.prec.isEmpty {
      try visitor.visitSingularStringField(value: self.prec, fieldNumber: 5)
    }
    if !self.freq.isEmpty {
      try visitor.visitSingularStringField(value: self.freq, fieldNumber: 6)
    }
    if !self.len.isEmpty {
      try visitor.visitSingularStringField(value: self.len, fieldNumber: 7)
    }
    if !self.pair.isEmpty {
      try visitor.visitSingularStringField(value: self.pair, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BookResponse, rhs: BookResponse) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.chanID != rhs.chanID {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.prec != rhs.prec {return false}
    if lhs.freq != rhs.freq {return false}
    if lhs.len != rhs.len {return false}
    if lhs.pair != rhs.pair {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
